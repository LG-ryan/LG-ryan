import React, { useState } from 'react';
import './App.css';
import { getHealth, simulateTCO, getTimingReport } from './services/api';

type TcoPayload = {
  purchasePrice: number;
  annualMileage: number;
  years: 1 | 3 | 5;
};

type TcoResult = {
  years: number;
  purchasePrice: number;
  annualMileage: number;
  depreciation: number;
  runningCosts: number;
  tco: number;
  notes: string;
};

type TimingScenario = {
  label: string;
  months: number;
  depreciation: number;
  runningCosts: number;
  total: number;
};
type TimingResult = {
  scenarios: TimingScenario[];
  recommendation: string;
  notes: string;
};

function App() {
  // 입력값 (두 기능이 같이 씀)
  const [purchasePrice, setPurchasePrice] = useState<number>(20000000);
  const [annualMileage, setAnnualMileage] = useState<number>(15000);
  const [years, setYears] = useState<1 | 3 | 5>(3);

  // 백엔드 상태
  const [backendStatus, setBackendStatus] = useState<string>('백엔드 상태 확인 전');

  // TCO 결과
  const [result, setResult] = useState<TcoResult | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');

  // 타이밍 리포트 결과
  const [timing, setTiming] = useState<TimingResult | null>(null);
  const [timingLoading, setTimingLoading] = useState<boolean>(false);
  const [timingError, setTimingError] = useState<string>('');

  const checkBackend = async () => {
    setBackendStatus('확인 중...');
    try {
      const res = await getHealth();
      setBackendStatus(`Backend: ${res.data.message}`);
    } catch (e) {
      setBackendStatus('Backend: 연결 오류');
    }
  };

  const onSubmitTco = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setResult(null);

    const payload: TcoPayload = { purchasePrice, annualMileage, years };

    try {
      const res = await simulateTCO(payload);
      setResult(res.data as TcoResult);
    } catch (e: any) {
      setError(e?.response?.data?.error ?? '요청 실패');
    } finally {
      setLoading(false);
    }
  };

  const onTiming = async () => {
    setTimingLoading(true);
    setTimingError('');
    setTiming(null);
    try {
      const res = await getTimingReport({ purchasePrice, annualMileage });
      setTiming(res.data as TimingResult);
    } catch (e: any) {
      setTimingError(e?.response?.data?.error ?? '요청 실패');
    } finally {
      setTimingLoading(false);
    }
  };

  const kr = (n: number) => n.toLocaleString();

  return (
    <div className="App">
      <header className="App-header">
        <div className="card">
          <h1>🚘 AI Car Life Manager</h1>
          <p className="subtitle">간단 TCO & 판매 타이밍 리포트 — 실제 모델/데이터로 곧 교체 예정</p>

          <div className="grid">
            {/* 좌측: 시스템 상태 */}
            <section className="section">
              <h3 style={{ marginTop: 0 }}>시스템</h3>
              <div className="actions" style={{ marginBottom: 10 }}>
                <button className="secondary" onClick={checkBackend}>백엔드 상태 확인</button>
              </div>
              <p style={{ margin: 0 }}>{backendStatus}</p>
            </section>

            {/* 우측: 입력값 (두 기능 공용) */}
            <section className="section">
              <h3 style={{ marginTop: 0 }}>입력</h3>
              <form onSubmit={onSubmitTco}>
                <label>
                  구매가(원)
                  <input
                    type="number"
                    value={purchasePrice}
                    onChange={(e) => setPurchasePrice(Number(e.target.value))}
                    min={0}
                    step={100000}
                    required
                    placeholder="예: 20,000,000"
                  />
                </label>

                <label>
                  연간 주행거리(km)
                  <input
                    type="number"
                    value={annualMileage}
                    onChange={(e) => setAnnualMileage(Number(e.target.value))}
                    min={0}
                    step={500}
                    required
                    placeholder="예: 15,000"
                  />
                </label>

                <label>
                  보유 기간(년) — (TCO용)
                  <select
                    value={years}
                    onChange={(e) => setYears(Number(e.target.value) as 1 | 3 | 5)}
                    required
                  >
                    <option value={1}>1년</option>
                    <option value={3}>3년</option>
                    <option value={5}>5년</option>
                  </select>
                </label>

                <div className="actions">
                  <button type="submit" className="primary" disabled={loading}>
                    {loading ? '계산 중...' : 'TCO 계산하기'}
                  </button>
                  <button type="button" className="secondary" onClick={onTiming} disabled={timingLoading}>
                    {timingLoading ? '분석 중...' : '판매 타이밍 리포트'}
                  </button>
                </div>

                {error && <p className="error">{error}</p>}

                {result && (
                  <div className="result">
                    <h4 style={{ marginTop: 0 }}>TCO 결과</h4>
                    <ul>
                      <li>보유기간: {result.years}년</li>
                      <li>구매가: {kr(result.purchasePrice)} 원</li>
                      <li>연간 주행거리: {kr(result.annualMileage)} km</li>
                      <li>감가(추정): {kr(result.depreciation)} 원</li>
                      <li>운영비(추정): {kr(result.runningCosts)} 원</li>
                      <li><strong>TCO(총비용): {kr(result.tco)} 원</strong></li>
                    </ul>
                    <small>{result.notes}</small>
                  </div>
                )}

                {timingError && <p className="error">{timingError}</p>}

                {timing && (
                  <div className="result">
                    <h4 style={{ marginTop: 0 }}>판매 타이밍 리포트</h4>
                    <div style={{ overflowX: 'auto' }}>
                      <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                        <thead>
                          <tr style={{ borderBottom: '1px solid rgba(255,255,255,.12)' }}>
                            <th style={{ textAlign: 'left', padding: '8px 6px' }}>시점</th>
                            <th style={{ textAlign: 'right', padding: '8px 6px' }}>감가(원)</th>
                            <th style={{ textAlign: 'right', padding: '8px 6px' }}>운영비(원)</th>
                            <th style={{ textAlign: 'right', padding: '8px 6px' }}>총비용</th>
                          </tr>
                        </thead>
                        <tbody>
                          {timing.scenarios.map((s) => (
                            <tr key={s.label} style={{ borderBottom: '1px solid rgba(255,255,255,.06)' }}>
                              <td style={{ padding: '8px 6px' }}>{s.label}</td>
                              <td style={{ textAlign: 'right', padding: '8px 6px' }}>{kr(s.depreciation)}</td>
                              <td style={{ textAlign: 'right', padding: '8px 6px' }}>{kr(s.runningCosts)}</td>
                              <td style={{ textAlign: 'right', padding: '8px 6px', fontWeight: 600 }}>{kr(s.total)}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    <p style={{ marginTop: 10 }}><strong>{timing.recommendation}</strong></p>
                    <small>{timing.notes}</small>
                  </div>
                )}
              </form>
            </section>
          </div>
        </div>
      </header>
    </div>
  );
}

export default App;
