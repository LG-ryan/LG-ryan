import React, { useState } from 'react';
import './App.css';
import { getHealth, simulateTCO } from './services/api';

type TcoPayload = {
  purchasePrice: number;
  annualMileage: number;
  years: 1 | 3 | 5;
};

type TcoResult = {
  years: number;
  purchasePrice: number;
  annualMileage: number;
  depreciation: number;
  runningCosts: number;
  tco: number;
  notes: string;
};

function App() {
  const [purchasePrice, setPurchasePrice] = useState<number>(20000000);
  const [annualMileage, setAnnualMileage] = useState<number>(15000);
  const [years, setYears] = useState<1 | 3 | 5>(3);

  const [backendStatus, setBackendStatus] = useState<string>('백엔드 상태 확인 전');
  const [result, setResult] = useState<TcoResult | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');

  const checkBackend = async () => {
    setBackendStatus('확인 중...');
    try {
      const res = await getHealth();
      setBackendStatus(Backend: );
    } catch (e) {
      setBackendStatus('Backend: 연결 오류');
    }
  };

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setResult(null);

    const payload: TcoPayload = {
      purchasePrice,
      annualMileage,
      years,
    };

    try {
      const res = await simulateTCO(payload);
      setResult(res.data as TcoResult);
    } catch (e: any) {
      setError(e?.response?.data?.error ?? '요청 실패');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>🚘 AI Car Life Manager</h1>

        <div style={{ marginBottom: 16 }}>
          <button onClick={checkBackend}>백엔드 상태 확인</button>
          <p style={{ marginTop: 8 }}>{backendStatus}</p>
        </div>

        <form onSubmit={onSubmit} style={{ display: 'grid', gap: 8, maxWidth: 360 }}>
          <label style={{ textAlign: 'left' }}>
            구매가(원)
            <input
              type="number"
              value={purchasePrice}
              onChange={(e) => setPurchasePrice(Number(e.target.value))}
              min={0}
              step={100000}
              required
            />
          </label>

          <label style={{ textAlign: 'left' }}>
            연간 주행거리(km)
            <input
              type="number"
              value={annualMileage}
              onChange={(e) => setAnnualMileage(Number(e.target.value))}
              min={0}
              step={500}
              required
            />
          </label>

          <label style={{ textAlign: 'left' }}>
            보유 기간(년)
            <select
              value={years}
              onChange={(e) => setYears(Number(e.target.value) as 1 | 3 | 5)}
              required
            >
              <option value={1}>1년</option>
              <option value={3}>3년</option>
              <option value={5}>5년</option>
            </select>
          </label>

          <button type="submit" disabled={loading}>
            {loading ? '계산 중...' : 'TCO 계산하기'}
          </button>
        </form>

        {error && <p style={{ color: 'salmon', marginTop: 12 }}>{error}</p>}

        {result && (
          <div style={{ marginTop: 16, textAlign: 'left', background: '#1f2430', padding: 16, borderRadius: 8 }}>
            <h3 style={{ marginTop: 0 }}>결과</h3>
            <ul style={{ listStyle: 'none', padding: 0, margin: 0, lineHeight: 1.8 }}>
              <li>보유기간: {result.years}년</li>
              <li>구매가: {result.purchasePrice.toLocaleString()} 원</li>
              <li>연간 주행거리: {result.annualMileage.toLocaleString()} km</li>
              <li>감가(추정): {result.depreciation.toLocaleString()} 원</li>
              <li>운영비(추정): {result.runningCosts.toLocaleString()} 원</li>
              <li><strong>TCO(총비용): {result.tco.toLocaleString()} 원</strong></li>
            </ul>
            <small>{result.notes}</small>
          </div>
        )}
      </header>
    </div>
  );
}

export default App;
