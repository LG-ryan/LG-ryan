import React, { useEffect, useState } from "react";
import "./App.css";
import { getHealth, simulateTCO, getTimingReport, getLifecycleStage } from "./services/api";

type TcoPayload = { purchasePrice:number; annualMileage:number; years:1|3|5; };
type TcoResult = { years:number; purchasePrice:number; annualMileage:number; depreciation:number; runningCosts:number; tco:number; notes:string; };
type TimingScenario = { label:string; months:number; depreciation:number; runningCosts:number; total:number; };
type TimingResult = { scenarios:TimingScenario[]; recommendation:string; notes:string; };
type LifecycleResult = { stage:string;color:string;label:string;reason:string;advice:string;threshold:{vehicleType:string;yearsRange:[number,number];kmRange:[number,number]};meta:{version:string;notes:string}; };

function App(){
  // 공통 입력
  const [purchasePrice,setPurchasePrice]=useState(20000000);
  const [annualMileage,setAnnualMileage]=useState(15000);
  const [years,setYears]=useState<1|3|5>(3);

  // 프로필(캐릭터 느낌)
  const [vehicleType,setVehicleType]=useState<"suv"|"sedan"|"hatchback"|"sports">("suv");
  const [odometer,setOdometer]=useState(80000);
  const [displayName,setDisplayName]=useState("내 차");

  // 결과/상태
  const [backendStatus,setBackendStatus]=useState("백엔드 상태 확인 전");
  const [tco,setTco]=useState<TcoResult|null>(null);
  const [timing,setTiming]=useState<TimingResult|null>(null);
  const [lifecycle,setLifecycle]=useState<LifecycleResult|null>(null);
  const [loadingTco,setLoadingTco]=useState(false);
  const [loadingTiming,setLoadingTiming]=useState(false);
  const [loadingLife,setLoadingLife]=useState(false);
  const [error,setError]=useState("");

  // 최초 로드 시 상태/프로필 복원 + 헬스 체크
  useEffect(()=>{
    try{
      const saved=localStorage.getItem("vehicleProfile");
      if(saved){
        const p=JSON.parse(saved);
        if(p.displayName) setDisplayName(p.displayName);
        if(p.vehicleType) setVehicleType(p.vehicleType);
        if(typeof p.odometer==="number") setOdometer(p.odometer);
      }
    }catch{}
    (async()=>{
      try{
        const res=await getHealth();
        setBackendStatus(`Backend: ${res.data.message}`);
      }catch{ setBackendStatus("Backend: 연결 오류"); }
    })();
  },[]);

  const saveProfile=()=>{
    localStorage.setItem("vehicleProfile",JSON.stringify({displayName,vehicleType,odometer}));
  };

  const onTco=async(e:React.FormEvent)=>{
    e.preventDefault(); setLoadingTco(true); setError(""); setTco(null);
    const payload:TcoPayload={purchasePrice,annualMileage,years};
    try{ const r=await simulateTCO(payload); setTco(r.data as TcoResult); }
    catch(e:any){ setError(e?.response?.data?.error??"요청 실패"); }
    finally{ setLoadingTco(false); }
  };

  const onTiming=async()=>{
    setLoadingTiming(true); setError(""); setTiming(null);
    try{ const r=await getTimingReport({purchasePrice,annualMileage}); setTiming(r.data as TimingResult); }
    catch(e:any){ setError(e?.response?.data?.error??"요청 실패"); }
    finally{ setLoadingTiming(false); }
  };

  const onLifecycle=async()=>{
    setLoadingLife(true); setError(""); setLifecycle(null);
    try{ const r=await getLifecycleStage({vehicleType,years,odometer}); setLifecycle(r.data as LifecycleResult); }
    catch(e:any){ setError(e?.response?.data?.error??"요청 실패"); }
    finally{ setLoadingLife(false); }
  };

  const kr=(n:number)=>n.toLocaleString();

  return (
    <div className="App">
      <header className="App-header">
        <div className="card">
          <h1>🚘 AI Car Life Manager</h1>
          <p className="subtitle">TCO · 판매 타이밍 · 라이트 시그널</p>

          <div className="grid">
            {/* 프로필 카드 (캐릭터 느낌) */}
            <section className="section">
              <div className="profile-card">
                <div className="avatar">🚙</div>
                <div className="profile-meta">
                  <div className="name-row">
                    <input
                      value={displayName}
                      onChange={(e)=>setDisplayName(e.target.value)}
                      placeholder="차 이름(별명)"
                    />
                    <button className="secondary" onClick={saveProfile}>저장</button>
                  </div>
                  <div style={{display:"flex",gap:8,flexWrap:"wrap"}}>
                    <span className="badge">타입</span>
                    <select value={vehicleType} onChange={(e)=>setVehicleType(e.target.value as any)}>
                      <option value="suv">SUV</option>
                      <option value="sedan">세단</option>
                      <option value="hatchback">해치백</option>
                      <option value="sports">스포츠</option>
                    </select>

                    <span className="badge">보유(년)</span>
                    <select value={years} onChange={(e)=>setYears(Number(e.target.value) as any)}>
                      <option value={1}>1</option>
                      <option value={3}>3</option>
                      <option value={5}>5</option>

cd "C:\Users\정지원\AI car manger\frontend\src"
Copy-Item .\App.tsx .\App.tsx.bak-profile -Force

@'
import React, { useEffect, useState } from "react";
import "./App.css";
import { getHealth, simulateTCO, getTimingReport, getLifecycleStage } from "./services/api";

type TcoPayload = { purchasePrice:number; annualMileage:number; years:1|3|5; };
type TcoResult = { years:number; purchasePrice:number; annualMileage:number; depreciation:number; runningCosts:number; tco:number; notes:string; };
type TimingScenario = { label:string; months:number; depreciation:number; runningCosts:number; total:number; };
type TimingResult = { scenarios:TimingScenario[]; recommendation:string; notes:string; };
type LifecycleResult = { stage:string;color:string;label:string;reason:string;advice:string;threshold:{vehicleType:string;yearsRange:[number,number];kmRange:[number,number]};meta:{version:string;notes:string}; };

function App(){
  // 공통 입력
  const [purchasePrice,setPurchasePrice]=useState(20000000);
  const [annualMileage,setAnnualMileage]=useState(15000);
  const [years,setYears]=useState<1|3|5>(3);

  // 프로필(캐릭터 느낌)
  const [vehicleType,setVehicleType]=useState<"suv"|"sedan"|"hatchback"|"sports">("suv");
  const [odometer,setOdometer]=useState(80000);
  const [displayName,setDisplayName]=useState("내 차");

  // 결과/상태
  const [backendStatus,setBackendStatus]=useState("백엔드 상태 확인 전");
  const [tco,setTco]=useState<TcoResult|null>(null);
  const [timing,setTiming]=useState<TimingResult|null>(null);
  const [lifecycle,setLifecycle]=useState<LifecycleResult|null>(null);
  const [loadingTco,setLoadingTco]=useState(false);
  const [loadingTiming,setLoadingTiming]=useState(false);
  const [loadingLife,setLoadingLife]=useState(false);
  const [error,setError]=useState("");

  // 최초 로드 시 상태/프로필 복원 + 헬스 체크
  useEffect(()=>{
    try{
      const saved=localStorage.getItem("vehicleProfile");
      if(saved){
        const p=JSON.parse(saved);
        if(p.displayName) setDisplayName(p.displayName);
        if(p.vehicleType) setVehicleType(p.vehicleType);
        if(typeof p.odometer==="number") setOdometer(p.odometer);
      }
    }catch{}
    (async()=>{
      try{
        const res=await getHealth();
        setBackendStatus(`Backend: ${res.data.message}`);
      }catch{ setBackendStatus("Backend: 연결 오류"); }
    })();
  },[]);

  const saveProfile=()=>{
    localStorage.setItem("vehicleProfile",JSON.stringify({displayName,vehicleType,odometer}));
  };

  const onTco=async(e:React.FormEvent)=>{
    e.preventDefault(); setLoadingTco(true); setError(""); setTco(null);
    const payload:TcoPayload={purchasePrice,annualMileage,years};
    try{ const r=await simulateTCO(payload); setTco(r.data as TcoResult); }
    catch(e:any){ setError(e?.response?.data?.error??"요청 실패"); }
    finally{ setLoadingTco(false); }
  };

  const onTiming=async()=>{
    setLoadingTiming(true); setError(""); setTiming(null);
    try{ const r=await getTimingReport({purchasePrice,annualMileage}); setTiming(r.data as TimingResult); }
    catch(e:any){ setError(e?.response?.data?.error??"요청 실패"); }
    finally{ setLoadingTiming(false); }
  };

  const onLifecycle=async()=>{
    setLoadingLife(true); setError(""); setLifecycle(null);
    try{ const r=await getLifecycleStage({vehicleType,years,odometer}); setLifecycle(r.data as LifecycleResult); }
    catch(e:any){ setError(e?.response?.data?.error??"요청 실패"); }
    finally{ setLoadingLife(false); }
  };

  const kr=(n:number)=>n.toLocaleString();

  return (
    <div className="App">
      <header className="App-header">
        <div className="card">
          <h1>🚘 AI Car Life Manager</h1>
          <p className="subtitle">TCO · 판매 타이밍 · 라이트 시그널</p>

          <div className="grid">
            {/* 프로필 카드 (캐릭터 느낌) */}
            <section className="section">
              <div className="profile-card">
                <div className="avatar">🚙</div>
                <div className="profile-meta">
                  <div className="name-row">
                    <input
                      value={displayName}
                      onChange={(e)=>setDisplayName(e.target.value)}
                      placeholder="차 이름(별명)"
                    />
                    <button className="secondary" onClick={saveProfile}>저장</button>
                  </div>
                  <div style={{display:"flex",gap:8,flexWrap:"wrap"}}>
                    <span className="badge">타입</span>
                    <select value={vehicleType} onChange={(e)=>setVehicleType(e.target.value as any)}>
                      <option value="suv">SUV</option>
                      <option value="sedan">세단</option>
                      <option value="hatchback">해치백</option>
                      <option value="sports">스포츠</option>
                    </select>

                    <span className="badge">보유(년)</span>
                    <select value={years} onChange={(e)=>setYears(Number(e.target.value) as any)}>
                      <option value={1}>1</option>
                      <option value={3}>3</option>
                      <option value={5}>5</option>
                    </select>

                    <span className="badge">누적 km</span>
                    <input type="number" value={odometer} onChange={(e)=>setOdometer(Number(e.target.value))} />
                  </div>

                  <div style={{display:"flex",gap:8,flexWrap:"wrap"}}>
                    {lifecycle && <span className="badge">{lifecycle.color} {lifecycle.label}</span>}
                    {tco && <span className="badge">TCO {kr(tco.tco)}원</span>}
                  </div>
                </div>
              </div>
            </section>

            {/* 입력 & 액션 */}
            <section className="section">
              <h3 style={{marginTop:0}}>입력</h3>
              <form onSubmit={onTco} style={{display:"grid",gap:12}}>
                <label>구매가(원)
                  <input type="number" value={purchasePrice} onChange={(e)=>setPurchasePrice(Number(e.target.value))} min={0} step={100000} required />
                </label>
                <label>연간 주행거리(km)
                  <input type="number" value={annualMileage} onChange={(e)=>setAnnualMileage(Number(e.target.value))} min={0} step={500} required />
                </label>
                <label>보유 기간(년, TCO용)
                  <select value={years} onChange={(e)=>setYears(Number(e.target.value) as any)}>
                    <option value={1}>1</option><option value={3}>3</option><option value={5}>5</option>
                  </select>
                </label>

                <div className="actions">
                  <button type="submit" className="primary" disabled={loadingTco}>{loadingTco?"계산 중...":"TCO 계산"}</button>
                  <button type="button" className="secondary" onClick={onTiming} disabled={loadingTiming}>{loadingTiming?"분석 중...":"판매 타이밍"}</button>
                  <button type="button" className="secondary" onClick={onLifecycle} disabled={loadingLife}>{loadingLife?"분류 중...":"라이트 시그널"}</button>
                </div>
              </form>

              {error && <p className="error">{error}</p>}
            </section>
          </div>

          {/* 결과 카드들 */}
          {tco && (
            <div className="result">
              <h4 style={{marginTop:0}}>TCO 결과</h4>
              <ul>
                <li>보유기간: {tco.years}년</li>
                <li>구매가: {kr(tco.purchasePrice)} 원</li>
                <li>연간 주행거리: {kr(tco.annualMileage)} km</li>
                <li>감가(추정): {kr(tco.depreciation)} 원</li>
                <li>운영비(추정): {kr(tco.runningCosts)} 원</li>
                <li><strong>TCO: {kr(tco.tco)} 원</strong></li>
              </ul>
              <small>{tco.notes}</small>
            </div>
          )}

          {timing && (
            <div className="result">
              <h4 style={{marginTop:0}}>판매 타이밍 리포트</h4>
              <div style={{overflowX:"auto"}}>
                <table>
                  <thead><tr><th style={{textAlign:"left"}}>시점</th><th style={{textAlign:"right"}}>감가</th><th style={{textAlign:"right"}}>운영비</th><th style={{textAlign:"right"}}>총비용</th></tr></thead>
                  <tbody>
                    {timing.scenarios.map(s=>(
                      <tr key={s.label}>
                        <td>{s.label}</td>
                        <td style={{textAlign:"right"}}>{kr(s.depreciation)}</td>
                        <td style={{textAlign:"right"}}>{kr(s.runningCosts)}</td>
                        <td style={{textAlign:"right",fontWeight:600}}>{kr(s.total)}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <p style={{marginTop:10}}><strong>{timing.recommendation}</strong></p>
              <small>{timing.notes}</small>
            </div>
          )}

          {lifecycle && (
            <div className="result">
              <h4 style={{marginTop:0}}>라이트 시그널</h4>
              <p style={{margin:"4px 0 10px"}}><span className="badge">{lifecycle.color} {lifecycle.label}</span></p>
              <ul>
                <li>이유: {lifecycle.reason}</li>
                <li>조언: {lifecycle.advice}</li>
                <li>기준: {lifecycle.threshold.vehicleType}, 연 {lifecycle.threshold.yearsRange[0]}~{String(lifecycle.threshold.yearsRange[1]).replace("Infinity","∞")}년 / {lifecycle.threshold.kmRange[0].toLocaleString()}~{String(lifecycle.threshold.kmRange[1]).replace("Infinity","∞")}</li>
              </ul>
              <small>{lifecycle.meta.version} · {lifecycle.meta.notes}</small>
            </div>
          )}

          {/* 푸터: 백엔드 상태(눈에 안 띄게) */}
          <div className="app-footer">{backendStatus}</div>
        </div>
      </header>
    </div>
  );
}
export default App;
